[user]
        name = Adarsh keshan
        email = adkeshan@amazon.com
[push]
        default = simple
[alias]
    squash = "!f(){ git reset --soft HEAD~${1} && git commit --edit -m\"$(git log --format=%B --reverse HEAD..HEAD@{1})\"; };f"
    up-mast = "!git fetch origin && git checkout origin/main"
    newb = "!git up-mast && git cpb"
    stash-cb = "!CURRENTBRANCH=$(git symbolic-ref HEAD 2>/dev/null | cut -d"/" -f 3)"
    catchup = "!_(){ CURRENTBRANCH=$(git symbolic-ref HEAD 2>/dev/null | cut -d"/" -f 3); git fetch origin; echo \"Currently on \"$CURRENTBRANCH\" - switching to \"$@; git checkout $@; git merge origin/$@; echo \"Going back to \"$CURRENTBRANCH; git checkout $CURRENTBRANCH; }; _"
    cleanup = "!git stash-cb && git checkout main && git pull origin main && git push origin main && git branch --merged | grep -v \"\\*\" | xargs -n 1 git branch -d && git checkout $CURRENTBRANCH && git remote prune origin"
    g = "grep -n"
    cpb = "!git checkout -b $1 && git push --set-upstream origin $1"
    wip = "commit -an -m WIP"
    cp = "!git add . && git commit --amend --no-edit && git push origin HEAD --force-with-lease"
    pr-clean = "!git for-each-ref refs/heads/pr/* --format=\"%(refname)\" | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"
    pr = "!f() { git fetch -fu ${2:-$(git remote |grep ^upstream || echo origin)} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
    create-pull-request = !sh -c 'stash pull-request $0 $@'
    newbr = "!git fetch origin && (git rev-parse --verify $1 >/dev/null 2>&1 && git checkout $1 || echo 'Branch $1 does not exist') && git checkout -b $2 && git push --set-upstream origin $2"
[core]
        editor = vi
        excludesfile = /Users/akeshan/.gitignore
